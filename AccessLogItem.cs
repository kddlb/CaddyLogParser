// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CaddyLogParser;
//
//    var accessLogItem = AccessLogItem.FromJson(jsonString);

namespace CaddyLogParser
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class AccessLogItem
    {
        [J("level")] public string Level { get; set; }
        [J("ts")] public double Timestamp { get; set; }
        [J("logger")] public string Logger { get; set; }
        [J("msg")] public string Msg { get; set; }
        [J("request")] public Request Request { get; set; }
        [J("common_log")] public string CommonLogField { get; set; }
        [J("duration")] public double Duration { get; set; }
        [J("size")] public long Size { get; set; }
        [J("status")] public long Status { get; set; }
        [J("resp_headers")] public Dictionary<string, List<string>> ResponseHeaders { get; set; }

        public override string ToString() => CommonLogField;
    }

    public partial class Request
    {
        [J("method")] public string Method { get; set; }
        [J("uri")] public string Uri { get; set; }
        [J("proto")] public string Proto { get; set; }
        [J("remote_addr")] public string RemoteAddress { get; set; }
        [J("host")] public string Host { get; set; }
        [J("headers")] public Dictionary<string, List<string>> Headers { get; set; }
        [J("tls", NullValueHandling = N.Ignore)] public TLSStatus TlsStatus { get; set; }
    }

    public partial class TLSStatus
    {
        [J("resumed")] public bool Resumed { get; set; }
        [J("version")] public long Version { get; set; }
        [J("ciphersuite")] public long CipherSuite { get; set; }
        [J("proto")] public string Proto { get; set; }
        [J("proto_mutual")] public bool ProtoMutual { get; set; }
        [J("server_name")] public string ServerName { get; set; }
    }

    public partial class AccessLogItem
    {
        public static AccessLogItem FromJson(string json) => JsonConvert.DeserializeObject<AccessLogItem>(json, CaddyLogParser.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AccessLogItem self) => JsonConvert.SerializeObject(self, CaddyLogParser.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
